name: Terraform Module Version Checker

on:
  workflow_dispatch:
  # schedule:
  #   - cron: '0 10 * * *'  # Daily at 10:00 UTC
  # push:
  #   branches:
  #     - main

env:
  # Terraform configuration
  # TERRAFORM_DIR: "example/complete"  # Uncomment to customize terraform directory

permissions:
  contents: read
  issues: write

jobs:
  # ===============================================
  # JOB 1: Module Version Analysis
  # Analyzes Terraform modules and checks for outdated versions
  # ===============================================
  
  analyze_modules:
    name: üîç Analyze Module Versions
    runs-on: ubuntu-latest
    outputs:
      has_outdated_modules: ${{ steps.analyze.outputs.has_outdated_modules }}
      modules_count: ${{ steps.analyze.outputs.modules_count }}
      outdated_count: ${{ steps.analyze.outputs.outdated_count }}
      outdated_modules_json: ${{ steps.analyze.outputs.outdated_modules_json }}
      analysis_summary: ${{ steps.analyze.outputs.analysis_summary }}

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: üõ†Ô∏è Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.6"

      - name: üîç Analyze module versions
        id: analyze
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Initialize counters and arrays
          total_modules=0
          outdated_modules=0
          processed_modules=0
          outdated_modules_array=()
          analysis_results=()
          
          # Change to terraform directory and capture modules output
          cd ${TERRAFORM_DIR:-example/complete}
          terraform init -input=false -backend=false > /dev/null 2>&1
          
          # Capture terraform modules output in a variable
          terraform_modules_output=$(terraform modules)
          
          # Process modules from the captured output
          while IFS= read -r line; do
            # Extract module information using regex
            if [[ $line =~ module\.([^[:space:]]+)\[([^]]+)\][[:space:]]+([0-9]+\.[0-9]+\.[0-9]+) ]]; then
              module_name="${BASH_REMATCH[1]}"
              module_path="${BASH_REMATCH[2]}"
              current_version="${BASH_REMATCH[3]}"
              
              # Skip non-registry modules
              if [[ ! "$module_path" =~ ^registry\.terraform\.io/ ]]; then
                continue
              fi
              
              total_modules=$((total_modules + 1))
              
              # Extract registry components
              registry_path="${module_path#registry.terraform.io/}"
              IFS='/' read -r namespace name provider <<< "$registry_path"
              
              if [[ -z "$namespace" || -z "$name" || -z "$provider" ]]; then
                analysis_results+=("‚ö†Ô∏è **$module_name**: Invalid registry path format")
                continue
              fi
              
              # Query Terraform Registry API
              api_url="https://registry.terraform.io/v1/modules/${namespace}/${name}/${provider}/versions"
              response=$(curl -s -H "Accept: application/json" "$api_url" 2>/dev/null)
              
              if [[ -z "$response" || "$response" == "null" ]]; then
                analysis_results+=("‚ö†Ô∏è **$module_name**: Unable to fetch version data from registry")
                continue
              fi
              
              # Extract latest version using jq
              latest_version=$(echo "$response" | jq -r '.modules[0].versions | map(.version) | sort_by(split(".") | map(tonumber)) | last' 2>/dev/null)
              
              if [[ -z "$latest_version" || "$latest_version" == "null" ]]; then
                analysis_results+=("‚ö†Ô∏è **$module_name**: Could not determine latest version")
                continue
              fi
              
              processed_modules=$((processed_modules + 1))
              
              # Compare versions
              if [[ "$current_version" == "$latest_version" ]]; then
                analysis_results+=("‚úÖ **$module_name**: Up-to-date (v$current_version)")
              else
                analysis_results+=("‚ùå **$module_name**: Outdated (v$current_version ‚Üí v$latest_version)")
                outdated_modules=$((outdated_modules + 1))
                
                # Store outdated module info as JSON for next job
                module_json=$(jq -n \
                  --arg name "$module_name" \
                  --arg path "$module_path" \
                  --arg current "$current_version" \
                  --arg latest "$latest_version" \
                  --arg namespace "$namespace" \
                  --arg provider_name "$name" \
                  --arg provider_type "$provider" \
                  '{name: $name, path: $path, current_version: $current, latest_version: $latest, namespace: $namespace, provider_name: $provider_name, provider_type: $provider_type}')
                
                outdated_modules_array+=("$module_json")
              fi
            fi
          done <<< "$terraform_modules_output"
          
          # Create JSON array of outdated modules
          outdated_modules_json=$(printf '%s\n' "${outdated_modules_array[@]}" | jq -s '.')
          
          # Create analysis summary
          analysis_summary=$(printf '%s\n' "${analysis_results[@]}")
          
          # Set outputs
          echo "has_outdated_modules=$([ $outdated_modules -gt 0 ] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "modules_count=$total_modules" >> $GITHUB_OUTPUT
          echo "outdated_count=$outdated_modules" >> $GITHUB_OUTPUT
          echo "outdated_modules_json<<EOF" >> $GITHUB_OUTPUT
          echo "$outdated_modules_json" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "analysis_summary<<EOF" >> $GITHUB_OUTPUT
          echo "$analysis_summary" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "üìä Analysis complete: $outdated_modules outdated modules found"

      - name: üìã Display analysis summary
        run: |
          echo "## üìä Module Analysis Summary"
          echo "- **Total Modules:** ${{ steps.analyze.outputs.modules_count }}"
          echo "- **Outdated Modules:** ${{ steps.analyze.outputs.outdated_count }}"
          echo "- **Status:** $([ "${{ steps.analyze.outputs.has_outdated_modules }}" == "true" ] && echo "üî¥ Updates Required" || echo "üü¢ All Modules Up-to-date")"
          echo ""
          echo "### üìã Detailed Results"
          echo "${{ steps.analyze.outputs.analysis_summary }}"

  # ===============================================
  # JOB 2: Issue Management
  # Creates or updates GitHub issues for outdated modules
  # ===============================================
  
  manage_issues:
    name: üêõ Manage GitHub Issues
    needs: analyze_modules
    if: needs.analyze_modules.outputs.has_outdated_modules == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: üè∑Ô∏è Ensure required labels exist
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create terraform label if it doesn't exist
          if ! gh label list | grep -q "^terraform"; then
            echo "üè∑Ô∏è Creating label: terraform"
            gh label create terraform --description "Terraform module related issues" --color 623CE4
          else
            echo "‚úÖ Label already exists: terraform"
          fi

      - name: üêõ Process outdated modules
        id: process_issues
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OUTDATED_MODULES_JSON: ${{ needs.analyze_modules.outputs.outdated_modules_json }}
        run: |
          issues_created=0
          issues_updated=0
          issues_skipped=0
          
          echo "üîç Processing ${{ needs.analyze_modules.outputs.outdated_count }} outdated modules..."
          
          # Process each outdated module from JSON
          echo "$OUTDATED_MODULES_JSON" | jq -c '.[]' | while read -r module_data; do
            module_name=$(echo "$module_data" | jq -r '.name')
            module_path=$(echo "$module_data" | jq -r '.path')
            current_version=$(echo "$module_data" | jq -r '.current_version')
            latest_version=$(echo "$module_data" | jq -r '.latest_version')
            
            # Create issue title and body
            issue_title="Upgrade(${module_name}): ${module_path} (${current_version} > ${latest_version})"
            issue_body="## üì¶ Module Version Upgrade Required
            
            **Module:** \`$module_name\`  
            **Registry Path:** \`$module_path\`  
            **Current Version:** \`$current_version\`  
            **Latest Version:** \`$latest_version\`  
            
            ---
            
            ### üîÑ Action Required
            
            Please update the module version in your Terraform configuration:
            
            \`\`\`hcl
            module \"$module_name\" {
              source = \"$module_path\"
              version = \"$latest_version\"
              # ... other configuration
            }
            \`\`\`
            
            ---
            
            *This issue was automatically generated by the Terraform Module Version Checker workflow.*
            "
            
            # Check for existing open issues
            existing_issue=$(gh issue list \
              --state open \
              --json title,number,body \
              --jq ".[] | select(.title == \"$issue_title\")" 2>/dev/null)
            
            if [[ -z "$existing_issue" ]]; then
              # Create new issue
              echo "üåü Creating new issue for: $module_name"
              gh issue create \
                --title "$issue_title" \
                --body "$issue_body" \
                --label terraform > /dev/null 2>&1
              
              issues_created=$((issues_created + 1))
            else
              issue_number=$(echo "$existing_issue" | jq -r '.number')
              existing_body=$(echo "$existing_issue" | jq -r '.body')
              
              # Check if the issue needs updating
              if [[ "$existing_body" != *"$latest_version"* ]]; then
                echo "‚úèÔ∏è Updating issue #$issue_number for: $module_name"
                gh issue edit "$issue_number" \
                  --title "$issue_title" \
                  --body "$issue_body" > /dev/null 2>&1
                
                issues_updated=$((issues_updated + 1))
              else
                echo "‚úÖ Issue already up-to-date for: $module_name"
                issues_skipped=$((issues_skipped + 1))
              fi
            fi
          done
          
          # Set outputs
          echo "issues_created=$issues_created" >> $GITHUB_OUTPUT
          echo "issues_updated=$issues_updated" >> $GITHUB_OUTPUT
          echo "issues_skipped=$issues_skipped" >> $GITHUB_OUTPUT
          
          echo "üìä Issue processing complete:"
          echo "- Created: $issues_created"
          echo "- Updated: $issues_updated"
          echo "- Skipped: $issues_skipped"

      - name: üìã Display issue summary
        run: |
          echo "## üêõ Issue Management Summary"
          echo "- **Issues Created:** ${{ steps.process_issues.outputs.issues_created }}"
          echo "- **Issues Updated:** ${{ steps.process_issues.outputs.issues_updated }}"
          echo "- **Issues Skipped:** ${{ steps.process_issues.outputs.issues_skipped }}"
          echo "- **Total Processed:** ${{ needs.analyze_modules.outputs.outdated_count }}"

  # ===============================================
  # JOB 3: Final Summary
  # Provides a comprehensive summary of the workflow execution
  # ===============================================
  
  workflow_summary:
    name: üìã Workflow Summary
    needs: [analyze_modules, manage_issues]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: üìã Generate workflow summary
        env:
          ANALYSIS_SUMMARY: ${{ needs.analyze_modules.outputs.analysis_summary }}
        run: |
          echo "## üéØ Terraform Module Version Checker - Workflow Summary"
          echo ""
          echo "### üìä Analysis Results"
          echo "- **Total Modules Analyzed:** ${{ needs.analyze_modules.outputs.modules_count }}"
          echo "- **Outdated Modules Found:** ${{ needs.analyze_modules.outputs.outdated_count }}"
          echo "- **Analysis Status:** $([ "${{ needs.analyze_modules.outputs.has_outdated_modules }}" == "true" ] && echo "üî¥ Updates Required" || echo "üü¢ All Modules Up-to-date")"
          echo ""
          
          if [[ "${{ needs.analyze_modules.outputs.has_outdated_modules }}" == "true" ]]; then
            echo "### üêõ Issue Management Results"
            echo "- **Issues Created:** ${{ needs.manage_issues.outputs.issues_created || '0' }}"
            echo "- **Issues Updated:** ${{ needs.manage_issues.outputs.issues_updated || '0' }}"
            echo "- **Issues Skipped:** ${{ needs.manage_issues.outputs.issues_skipped || '0' }}"
            echo ""
            echo "### üìã Detailed Analysis"
            echo "$ANALYSIS_SUMMARY"
          fi
          
          echo ""
          echo "### üîó Next Steps"
          if [[ "${{ needs.analyze_modules.outputs.has_outdated_modules }}" == "true" ]]; then
            echo "1. üìã Review the generated GitHub issues"
            echo "2. üîÑ Update module versions in your Terraform configurations"
            echo "3. ‚úÖ Test the updated configurations"
            echo "4. üöÄ Deploy the changes"
          else
            echo "‚úÖ All modules are up-to-date! No action required."
          fi 
